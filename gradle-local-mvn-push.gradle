/*
 * Copyright 2014 Sergi MartÃ­nez
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}


afterEvaluate { project ->
    uploadArchives  {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: REPOSITORY_PATH + "/release")
                snapshotRepository(url: REPOSITORY_PATH + "/snapshot")

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    android.libraryVariants.all { variant ->
        def javadocTask = task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            try {
                ext.androidJar = project.files(android.getBootClasspath().join(File.pathSeparator))
            } catch (Exception e) {
                ext.androidJar = project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator))
            }
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }

        javadocTask.dependsOn variant.javaCompile

        def jarJavadocTask = task("jar${variant.name.capitalize()}Javadoc", type: Jar) {
            description "Generate Javadoc Jar for $variant.name"
            classifier = 'javadoc'
            from javadocTask.destinationDir
        }

        jarJavadocTask.dependsOn javadocTask
        artifacts.add('archives', jarJavadocTask)

        def jarSourceTask = task("jar${variant.name.capitalize()}Sources", type: Jar) {
            description "Generates Java Sources for $variant.name."
            classifier = 'sources'
            from variant.javaCompile.source
        }

        jarSourceTask.dependsOn variant.javaCompile
        artifacts.add('archives', jarSourceTask)
    }

}
